<?php
//
// File generated by ... on the 2024-04-02T09:30:42+0200
// Please do not edit manually
//

/**
 * Classes and menus for combodo-oauth-email-synchro (version 1.2.1)
 *
 * @author      iTop compiler
 * @license     http://opensource.org/licenses/AGPL-3.0
 */



class MailInboxOAuth extends MailInboxStandard
{
	public static function Init()
	{
		$aParams = array(			'category' => 'grant_by_profile,application',
			'key_type' => 'autoincrement',
			'name_attcode' => array('login'),
			'image_attcode' => '',
			'state_attcode' => '',
			'reconc_keys' => array('server', 'login', 'protocol', 'mailbox', 'port'),
			'db_table' => 'mailinbox_oauth',
			'db_key_field' => 'id',
			'db_finalclass_field' => 'realclass',
			'style' =>  new ormStyle(null, null, null, null, null, null),);
		MetaModel::Init_Params($aParams);
		MetaModel::Init_InheritAttributes();
		MetaModel::Init_AddAttribute(new AttributeExternalKey("oauth_client_id", array("targetclass"=>'OAuthClient', "allowed_values"=>null, "sql"=>'oauth_client_id', "is_null_allowed"=>false, "on_target_delete"=>DEL_AUTO, "allow_target_creation"=>false, "display_style"=>'select', "create_temporary_object"=>false, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeExternalField("oauth_provider", array("extkey_attcode"=>'oauth_client_id', "target_attcode"=>'provider', "allowed_values"=>null, "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeExternalField("client_id", array("extkey_attcode"=>'oauth_client_id', "target_attcode"=>'client_id', "allowed_values"=>null, "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeExternalField("client_secret", array("extkey_attcode"=>'oauth_client_id', "target_attcode"=>'client_secret', "allowed_values"=>null, "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeExternalField("access_token", array("extkey_attcode"=>'oauth_client_id', "target_attcode"=>'token', "allowed_values"=>null, "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeExternalField("refresh_token", array("extkey_attcode"=>'oauth_client_id', "target_attcode"=>'refresh_token', "allowed_values"=>null, "always_load_in_tables"=>false)));



		MetaModel::Init_SetZListItems('details', array (
  'col:col0' => 
  array (
    'fieldset:MailInbox:Server' => 
    array (
      0 => 'server',
      1 => 'login',
      2 => 'oauth_client_id',
      3 => 'protocol',
      4 => 'port',
      5 => 'mailbox',
      6 => 'active',
      7 => 'trace',
    ),
    'fieldset:MailInbox:Errors' => 
    array (
      0 => 'error_behavior',
      1 => 'notify_errors_to',
      2 => 'notify_errors_from',
    ),
  ),
  'col:col1' => 
  array (
    'fieldset:MailInbox:Behavior' => 
    array (
      0 => 'behavior',
      1 => 'email_storage',
      2 => 'target_folder',
      3 => 'target_class',
      4 => 'ticket_default_values',
      5 => 'ticket_default_title',
      6 => 'title_pattern',
      7 => 'stimuli',
    ),
    'fieldset:MailInbox:Caller' => 
    array (
      0 => 'unknown_caller_behavior',
      1 => 'unknown_caller_rejection_reply',
      2 => 'caller_default_values',
    ),
    'fieldset:MailInbox:OtherContacts' => 
    array (
      0 => 'import_additional_contacts',
    ),
  ),
));
		MetaModel::Init_SetZListItems('standard_search', array (
  0 => 'server',
  1 => 'login',
  2 => 'mailbox',
  3 => 'protocol',
  4 => 'active',
  5 => 'oauth_client_id',
));
		MetaModel::Init_SetZListItems('list', array (
  0 => 'server',
  1 => 'mailbox',
  2 => 'oauth_client_id',
  3 => 'protocol',
  4 => 'active',
));
;
	}


	/**
            * Get an EmailSource instance initialized according to the MailInbox configuration
            * @throws Exception
            * @return EmailSource The initialized EmailSource or an exception if the conneciton fails
            */
	public function GetEmailSource()
	{
		  $oSource = new Combodo\iTop\Extension\Service\IMAPOAuthEmailSource($this);
		  return $oSource;
	}



	public function GetAttributeFlags($sAttCode, &$aReasons = array(), $sTargetState = '')
	{
		if ($sAttCode == 'protocol') {
			return OPT_ATT_READONLY;
		}

		return parent::GetAttributeFlags($sAttCode, $aReasons, $sTargetState);
	}
          



	public function GetInitialStateAttributeFlags($sAttCode, &$aReasons = array())
	{
		if ($sAttCode == 'protocol') {
			return OPT_ATT_READONLY;
		}

		return parent:: GetInitialStateAttributeFlags($sAttCode, $aReasons);
	}
          



	public function PrefillCreationForm(&$aContextParam)
	{
		$this->Set('protocol', 'imap');

		parent::PrefillCreationForm($aContextParam);
	}
          



	public function ComputeValues()
	{
		parent::ComputeValues();
		$this->Set('protocol', 'imap');
	}
          

}